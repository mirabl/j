SD/acid: C in ACID	Consistency<br><br>a transaction moves the DB from a <b>valid state to other valid state</b> (e.g. preserve unique keys)<br><br>Not the same as C in CAP
SD/acid: D in ACID	when a transaction is committed, it will <b>remain committed</b> even in the case of a system failure (power, crash)
SD/acid: I in ACID	concurrent execution of transactions leaves the DB in same state than if the they were executed sequentially
SD/apps: <b>Dedup</b> system by UID	UID-<b>partitioned</b> workers with local <b>KV store</b> (RocksDB)<br>Fast membership test with LSM DBs (in-mem Bloom)<br><br>Keep UIDs in a time window, <b>expire</b> others:<br>use DB TTL; or <b>secondary index</b> with seqno/ts in <b>column family</b>: <b>sorted iterate</b> to expire<br><br>worker reads output topic after crash to rebuild state
SD/cap: Availability in CAP theorem (2)	every request receives a response about its success<br><br>or any reachable replica is available for reads and writes
SD/cap: CAP (C, A def)	C: every read receives most recent write or error<br><br><br>A: every request receives non-error result with no guarantees that it is most recent write
SD/cap: Consistency in CAP theorem	all nodes see the same data all the time<br><br>equivalent to <b>single-copy</b> of the data
SD/cap: Partition tolerance in CAP theorem	system continues to operate despite message loss or failure of part of the system
SD/network: network addressing methods (routing schemes) (5)	<b>unicast</b><br><br><b>broadcast</b>: one-to-all, subnet generally<br><br><b>multicast</b>: like broadcast but subset<br><br><b>anycast</b>: to one of many with same IP address (closest), used by CDN<br><br><b>geocast</b>
SD/para: <b>synchronized</b> Java primitive	used to define a <b>critical section</b><br><br>only <b>one thread</b> can enter block of code<br><br>can be used on code blocks or methods
SD/para: Deadlock (def, example)	task waits forever for conditions that can not be met<br><br>tasks wait for other tasks<br><br>ex: 2 tasks with 2 resources with each 1 lock<br>dining philosophers
SD/para: dining philosophers problem, solutions (2)	round table, knife/fork<br><br>1. request <b>smaller index</b> resources first<br><br>or 2. add <b>arbitrator</b>
SD/para: how to <b>avoid deadlock</b>	make <b>locking order fixed</b> when multiple locks
SD/para: livelock	2+ processes change their states in response to changes in the other process(es), no useful work<br><br>ex. corridor
SD/para: mutex	one thread in <b>critical section</b> at a time
SD/para: producer-consumer problem, solution	fixed size buffer<br>ensure that don't read if empty, don't write if full<br><br>use <b>2 semaphores</b>: remainingSpace, currentItems
SD/para: readers-writers problem (3 variations)	<b>multiple readers</b> at the same time<br>only <b>1 writer</b><br><br>1. readers preference (can starve writers)<br>2. writers preference (starve readers)<br>3. fairness
SD/para: semaphore	<b>count</b> how many units of resources are available<br><br>safe operations to modify count<br><br>counting/binary semaphore
SD/para: starvation	runnable process is overlooked indefinitely by the scheduler<br><br>although it is able to proceed, it is never chosen
SD/para: thread model for a web server	use <b>thread pool</b><br><br><b>avoids overhead</b> when create/delete<br>caps <b>maxThreads</b><br><br>use <b>synchronized task queue</b>
SD/pattern: CQRS	command query responsibility separation<br><br>separate read and write of data
SD/pattern: how to reduce <b>tail latencies</b>	<b>Backup requests</b><br><br>send <b>second request</b> to <b>other</b> server when first answer is late
SD/store: Denormalization	improve read perf at the expense of write perf. <br>Redundant copies of the data are written in multiple tables to avoid expensive joins. 
SD/store: Federation	= functional partitioning<br><br>splits up databases by function. <br><br>For example, forums, users, and products
SD/store: NoSQL	 is a collection of data items represented in a key-value store, document-store, wide column store, or a graph database. <br>Data is denormalized, and joins are generally done in the application code.
SD/store: Primary vs. Secondary index	- Primary:  on a key with <b>unique values</b><br>controls <b>sorted storage layout</b> of rows. Multiple columns?<br><br>- Secondary: can be on <b>key with duplicates</b><br>no effect on order
SD/store: foreign key	field (or several) in one table that <b>uniquely</b> identifies a <b>row</b> of <b>another table</b> (<b>primary</b> or unique key of that table)
SD/store: types of data store (9)	RDBMS<br>k/v<br>document<br>column-family<br>graph<br>analytics<br>blob<br>search engine DB<br>time series DB
SD: 2 types of failover	active-passive (master-slave)<br><br>active-active (master-master)
SD: How many simultaneous connections on a whatsapp server	2 million
SD: N+2 principle	other machines can absorb load if 2 largest instances are down<br><br>e.g. machine off or release
SD: Pregel/Giraph, how it works	distributed <b>graph processing</b><br>at each <b>iteration</b>:<br><b>vertex</b> receives <b>messages</b> sent by other vertices at previous step</b> to other<br><br>performs computation<br>can <b>update</b> its vertex <b>value</b> and outgoing edges values<br>can <b>send</b> messages<br><br>like a mapper can send to reducer in MR
SD: SLO for S3 (2)	99.99 (4) availability<br><br>99.99999999 (10) durability
SD: drawback of DNS load balancing	results are cached by intermediate servers, so not responsive when change
Sort/gen: 3 big sorts on large data<br>+ advantages	quicksort: <b>fast</b>, not stable unless storage, bad <b>worst case</b><br><br>mergesort: <b>stable</b>, <b>not in-place</b>, parallelizable, contiguous access<br><br>heapsort: <b>in-place, not stable</b>, <b>slower</b> than quicksort
Sort/gen: 6 questions on data	how many keys, duplicates, partially sorted, long to compare, small range, disk access possible
Sort/gen: 6 sort properties	- stable<br>- in place<br>- comparison or not<br>- external<br>- good with pre-sorted<br>- method: partition, merge, select, insert, exchange   Sort
Sort/gen: real world sorting	<b>insertion sort</b> on <b>small arrays</b> (incl. bottom of recursion)<br><br>need to be <b>good on pre-sorted</b><br><br>maybe be <b>stable</b><br><br>example: <b>timsort</b> (find runs, merge/insertion)
Sort/gen: sort when element are nearly sorted (2 ways)	insertion sort<br>heapsort
Sort/gen: which sort for:<br>1. general large integer array (2)<br>2. small array<br>3. almost sorted (2)<br>4. small range array<br>5. many duplicates<br>6. stability required (2)	1. quicksort, timsort<br>2. insertion sort<br>3. depends: heapsort/insertion<br>4. counting sort in array or BST<br>5. BST<br>6. merge sort/decorate-sort (key, index)
Sort: QuickSort: best and worst case of QuickSort<br><br>memory complexity	best: pivot splits array in half each time O(n log n)/O(log n)<br>worst: pivot is min (or max), O(n^2)/O(log n)<br><br>Memory: O(log n) with in-place partitioning
Sort: Shell sort	choose <b>gap sequence</b><br><b>iterate on gaps</b><br><br><b>swap gapped pairs</b><br>like a bubble sort<br><br>in place<br><br>complexity: difficult
Sort: mergesort implementation (2)	- <b>top-down</b> using recursion<br><br>- <b>bottom-up</b> using loop
Sort: mergesort<br>- time: best and worst case<br>- memory	time: always O(n log n)<br><br>memory: O(n) aux
Sort: tournament sort	load elements in a <b>min winner tournament tree</b><br><br>extract top to a <b>sorted list</b><br><br>not all array fits at bottom of tree (memory tradeoff)<br><br>do <b>multiple passes</b> and <b>merge sorted lists</b>
String/ds: suffix array	same use as suffix tree but with <b>4 times less memory</b><br><br>sorted array of suffixes
String/ds: suffix tree<br>- definition<br>- complexities<br>- 1 problem	<b>compressed trie</b> of <b>suffixes</b><br>naive: construction time and space O(n^2)<br>smart: O(n) / O(n)<br><br>substring search in O(m)
String/match: Boyer-Moore	try to match from start of text but <b>from end of pattern</b><br>when <b>mismatch, skip chars</b> when possible<br><br>2 prepro tables to skip chars:<br>- indexOfLastOccurence[char]<br>- other table more complicated<br>O(n/m) to O(nm)
String/match: Regex matching (2)	1. <b>recursive</b><br><br><b>DP</b> bool match[iStr][iPat]<br>O(mn)<br><br>offset from left to right<br>maybe store last char in table
