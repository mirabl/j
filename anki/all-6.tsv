Prob: transitive closure def, algo	= reachable[s][t] matrix<br><b>(if undirected: = easy connected-co)</b><br><br>DFS on each vertex to fill reachable[src][*]<br>O(V (V + E))<br><br>or <b>Floyd-Warshall-like</b> O(n^3)
Prob: subset of size n array which sums to 0 mod n	<b>prefix sums: 0 or collisions</b><br><br>either:<br>- one is <b>0</b><br><br>- <b>two are equal</b>, so difference is solution<br><br>O(n)
Prob: longest increasing <b>subarray</b><br>+ trick	<b>one pass</b> O(n)<br><br>--<br>trick: if current max is L<br><b>skip</b> L chars and check in <b>reverse order first</b><br><br>improves best-case complexity<br>but not worst-case
Prob: invert permutation with constant space	decompose in <b>cycles</b><br><br>invert each cycle<br><br>fix only one element at a time (min of cycle)
Prob: next permutation	from the left, find position to increment<br>(except last position)<br><br>increment it<br><br>reset left to minimum
Prob: copy postings linked-list with no additional storage	<b>3 passes</b><br><br>modify next pointer of original list<br>then restore
Stack: how to implement stack (2)	<b>linked list</b><br><br>or <b>array</b><br>(needs resizing, so amortized)
Stack: sort a stack (2)	using a second stack<br><br>or recursively:<br>need 2 recursions:<br>sort, insert in sorted
Tree: LCA with parent pointer	go up the tree to <b>find depth</b><br><br><b>synchronize</b><br><br><b>meet</b> while going up
Tree: LCA without parent pointer	recursive, returns node*<br>return <b>non-null if one present</b><br><br>if left and right return null: root<br>otherwise: the non-null is solution<br><br>O(n)
Tree: iterative in-order traversal of binary tree	<b>stack</b> of nodes + <b>curnode</b> pointer<br><br>go all <b>down left</b> while <b>pushing to stack</b><br><br><b>pop</b> from stack, <b>print</b>, <b>curnode=right</b>
Tree: threaded binary tree, def, uses	<b>null right</b> pointers replaced by pointer to <b>next inorder</b> node<br><br><br>used for O(1) space iterative inorder traversal
Tree: in-order iterative traversal with parent pointers	go <b>all left</b>, then up/right<br><br>when going up, need to know <b>if we come from left or right</b><br><br>-> store child in <b>prev</b> variable
Tree: reconstruct from pre-order with null	from <b>right to left</b><br>with <b>stack</b><br><br>push null<br><b>when non-null, <b>pop 2</b>, <b>push new</b>
Heap: from max-heap, check if k-th largest element is >= x in O(k)/O(k)	<b>recursive</b><br>global descent with larger/equal counters<br><br>stop early<br><br>nb calls is O(k) as counters are almost always incremented
Prob: Selection algorithm<br>def, algo, complex	find <b>k-th greatest</b> element<br>find <b>median</b><br><br>use <b>Quickselect</b><br><b>O(n) average</b><br><br>but worst case <b>O(n^2) if bad pivot</b><br>use <b>random</b> or median of medians
Binary Search: find <b>first</b> element (2)	- tweak binary search<br><br>- or set <b>currentBest variable</b> and continue
Prob: find k-th largest element from n streamed elements, once at the end (2)	- heap: O(n log k)<br><br>- better: <b>array of 2k</b><br><br>when full, purge to size <b>k</b><br>with O(k) <b>selection</b><br><br>total: O(n)
Prob: find missing one from 1 billion of IP adresses<br>using 2 MB of RAM	<b>two passes LSB/MSB</b><br><br>find missing <b>LSB</b>:<br>count LSB in RAM array<br><br>find <b>whole IP</b>, <b>filtering</b> on LSB
Prob: array where all elements appear 3 times and one appears once, find it	<b>bit decomposition</b><br><br>for each <b>bit position</b>:<br><b>count modulo 3</b><br><br>at the end, count=0,1,3<br><br>missing element: counts=1
TSort:<br>3 big sorts on large data<br>+ advantages	quicksort: <b>fast</b>, not stable unless storage, bad <b>worst case</b><br><br>mergesort: <b>stable</b>, <b>not in-place</b>, parallelizable, contiguous access<br><br>heapsort: <b>in-place, not stable</b>, <b>slower</b> than quicksort
Sort: which sort for:<br>1. general large integer array<br>2. small array<br>3. almost sorted (2)<br>4. small range array<br>5. many duplicates (2)<br>6. stability required (2)	1. quicksort<br>2. insertion sort<br>3. depends on def. heap, heapsort, insertion sort<br>4. counting sort in array or BST<br>5. merge sort or decorate-sort (key, index)
Sort: sort without moving too many records (which might be expensive)	indirect sort:<br>1. sort secondary <b>array of indices</b><br><br>2. apply sort to array (move records)
SD: messaging system semantics	<b>at-least-once</b>: producer client retries when ack timeout or error<br><br><b>at-most-once</b>: no retries<br><br><b>exactly-once</b>: on Kafka, uses sequence numbers
BST: insert/delete	- insert: recursive like searching<br><br>- delete: <b>replace by successor</b> in right subtree<br>careful corner cases
BST: build from sorted linked list	avoid finding the middle over and over<br><br>have pointer in list<br><br>recursively create left subtree<br>move pointer and set root value<br><br>recursively create right<br><br>O(n)
Prob: from 3 sorted arrays, find i, j, k s.t. d(i,j,k)=max(|A(i)-B(j)|, ...) is minimum	<b>1 pointer in each</b><br><b>move 1</b> (min) at each step<br><br>like intersection of sorted arrays<br><br>record minimum<br><br>O(len A + len B + ..)
Prob: most visited pages, compute top-k with frequency:<br>-1. once at end<br>-2. any time streaming	1. hash map freq[s]<br>at end, do <b>k-selection</b> (quickselect, heap, 2k array) O(n)<br><br>2. hash map bstNodeForString[s] + <b>BST</b> with (count, s)<br><br>update by deleting/re-inserting in BST<br>end: top-k from BST
Prob: most visited pages in last W fixed seconds, query any time streaming	<b>3 structures</b>:<br><br>1. <b>BST</b>: (count, s)<br><br>2. <b>HashMap</b> bstNodeForString[s]<br><br>3. <b>Queue</b> Q of elements in current window<br><br>increase-decrease in BST when insert/remove from Q
Prob: Gaussian primes	primes with integer-complex numbers<br>sort by <b>modulus</b> to order them and put in BST<br><br>Eratosthene <b>sieve</b>
Prob: View from above (stacked segments of different color and height)	sort enter/exit list of segments<br>maintain <b>BST</b> (height, color)
BST: nodes have <b>size of their subtree</b> as a field<br>- find size of a <b>range</b> [a,b]<br>- how to <b>update</b> when insert/delete	count number of nodes <a: search a and <b>update count</b> if go <b>left</b> or <b>right</b><br>res: totalsize- "<a" - ">b"<br><br>update: change size along the search path of node to add/remove
Prob: given set of intervals, find all that <b>intersect a query interval</b><br>support insert/delete	use <b>Interval Tree</b><br><br>search for <b>one</b> intersecting interval<br>remove it<br>repeat
