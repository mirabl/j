2sum: Given an array of integers, return indices of the two numbers such that they add up to a specific target.;same element twice? Use hash table O(n)|O(n), sort+two pointers O(n log n)|O(1), sort+BS O(n log n)|O(1)
Longest Substring Without Repeating Characters;left and right pointers, hash set for characters in the substring, move either left or right O(n)|O(n) // traverse left to right, maintaining longest valid substring ending at this position, use map<char,position> to know where current character appeared last O(n)|O(n)
Longest Palindromic Substring;for each position, find longest even and odd length substring with this center O(n^2)|O(1) // DP bottom-up with length-0 length-1 -2 ... substrings O(n^2)|O(1) // O(n) difficult algorithm exists

Container With Most Water;two pointers, from start and end, reduce width and stop only when height increases, O(n)|O(1)
3Sum  Find all unique triplets in the array which gives the sum of zero;sort, loop for first element and then 2sum sweep, avoid duplicates by avoiding duplicate first element O(n^2)|O(1)
substring search;naive O(n*m) // robin-karp rolling hash O(n + m) // advanced O(n)
next permutation;?
combination sum: Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T., same number can be repeated;backtracking (or DP)
maximum subarray sum;one pass, at each position either extend or start new subarray O(n)|O(1)
merge intervals;sort by start, one pass O(nlog n)|O(n)
index in permutation sequence;
Find the smallest window in a string containing all characters of another string;sliding window O(n)|O(n)
gray code;formula, recursion?

