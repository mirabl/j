String: Longest Substring Without Repeating Characters	Window. left and right pointers, hash set for characters in the substring, move either left or right O(n)|O(n) // traverse left to right, maintaining longest valid substring ending at this position, use map<char,position> to know where current character appeared last O(n)|O(n)
Tree: Print tree perimeter (border)	print left boundary without leaf,<br> print leaves, <br>print right in reverse (recursive)
Tree: Inorder sucessor in BST without parent pointer	Search from root O(h). <br>Instead of traveling up with parent pointers: Travel down the tree, if a node’s data is greater than root’s data then go right side, otherwise go to left side.
DS: implement a queue using two stacks	empty first stack into second stack
SD: vertical/horizontal scaling 	vertical: add more power to a machine<br><br>horizontal: add more machines
SD apps: mechanism for asynchronicity	queues
DS: external merge sort	sort chunk & write to disk, load chunk of chuck and merge-write
Sort:<br>Selection and Insertion sort: best and worst case	- Selection: no difference, <br>always O(n^2)/O(1) auxiliary<br><br>- Insertion: sorted O(n)/O(1) aux<br>worst: reverse sorted O(n^2)/O(1) aux
Stack: sort a stack (2)	using a second stack<br><br> or recursively
Sort: bubble sort	swap pairs to put max at i=end of array<br>i--
SD: Federation	= functional partitioning<br><br>splits up databases by function. <br><br>For example, forums, users, and products
Array: find subarray with maximum sum	one pass, accumulate (Kadane)<br><br>at each position either extend or start new subarray O(n)|O(1)
Array: 3Sum  Find all unique triplets in the array which gives the sum of zero	sort, loop for first element and then 2sum sweep, <br>avoid duplicates by avoiding duplicate first element <br>O(n^2)|O(1)
Sort: insertion sort<br>selection sort	insertion: insert A[i] in sorted A[0]...A[i-1]<br><br>select min put it at A[i=0], i++
Stack: implement stack with O(1) min<br>(2 ways)	push (x, min) when pushing x, <br><br>or use second stack
Prob:<br>Search: find element in row-and-column-sorted matrix	start from NE corner
SD: replication lag for MySQL	time between read/write to master and replication to all slaves
Array: 2sum (3 ways)	same element twice?<br> Use hash table O(n)|O(n), <br>sort+two pointers O(n log n)|O(1), <br>sort+BS O(n log n)|O(1)
SD: drawback of DNS load balancing	results are cached by intermediate servers, so not responsive when change
Prob: Sudoku Solver	Backtracking<br><br>check if one value is already in a row/col/square, recurse
LinkedList: Sort a linked list	use merge sort
SD apps: Back pressure	feedback mechanism used by producers to let know consumers how they should adjust their requests
Math: number of trailing zeroes in a factorial	powers of 2, 5
