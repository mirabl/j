String: Longest Substring Without Repeating Characters	Window. left and right pointers, hash set for characters in the substring, move either left or right O(n)|O(n) // traverse left to right, maintaining longest valid substring ending at this position, use map<char,position> to know where current character appeared last O(n)|O(n)
Tree: Print tree perimeter (border)	print left boundary without leaf,<br> print leaves, <br>print right in reverse (recursive)
Tree: Inorder sucessor in BST without parent pointer	Search from root O(h). <br>Instead of traveling up with parent pointers: Travel down the tree, if a node’s data is greater than root’s data then go right side, otherwise go to left side.
DS: implement a queue using two stacks	empty first stack into second stack
SD: vertical/horizontal scaling 	vertical: add more power to a machine<br><br>horizontal: add more machines
SD apps: mechanism for asynchronicity	queues
DS: external merge sort	sort chunk & write to disk, load chunk of chuck and merge-write
Sort:<br>Selection and Insertion sort: best and worst case	- Selection: no difference, <br>always O(n^2)/O(1) auxiliary<br><br>- Insertion: sorted O(n)/O(1) aux<br>worst: reverse sorted O(n^2)/O(1) aux
Sort: bubble sort	swap pairs to put max at i=end of array<br>i--
SD: Federation	= functional partitioning<br><br>splits up databases by function. <br><br>For example, forums, users, and products
Array: find subarray with maximum sum	one pass, accumulate (Kadane)<br><br>at each position either extend or start new subarray O(n)|O(1)
Array: 3Sum  Find all unique triplets in the array which gives the sum of zero	sort, loop for first element and then 2sum sweep, <br>avoid duplicates by avoiding duplicate first element <br>O(n^2)|O(1)
Sort: insertion sort<br>selection sort	insertion: insert A[i] in sorted A[0]...A[i-1]<br><br>select min put it at A[i=0], i++
Stack: implement stack with O(1) min<br>(2 ways)	push (x, min) when pushing x, <br><br>or use second stack
Prob:<br>Search: find element in row-and-column-sorted matrix	start from NE corner
SD: replication lag for MySQL	time between read/write to master and replication to all slaves
Array: 2sum (3 ways)	same element twice?<br> Use hash table O(n)|O(n), <br>sort+two pointers O(n log n)|O(1), <br>sort+BS O(n log n)|O(1)
SD: drawback of DNS load balancing	results are cached by intermediate servers, so not responsive when change
Prob: Sudoku Solver	Backtracking<br><br>check if one value is already in a row/col/square, recurse
LinkedList: Sort a linked list	use merge sort
SD apps: Back pressure	feedback mechanism used by producers to let know consumers how they should adjust their requests
Math: number of trailing zeroes in a factorial	powers of 2, 5
Tree: from array, create BST with minimal height	sort, <br>take middle of array then recursive
SD: NoSQL	 is a collection of data items represented in a key-value store, document-store, wide column store, or a graph database. <br>Data is denormalized, and joins are generally done in the application code.
SD components: when to use BigQuery/Dremel<br>when to use MapReduce	BigQuery: any query, SQL-like, no latency, small output (stats)<br><br>MapReduce: can do any processing, more latency, have to implement all jobs
MergeSort:<br>- time: best and worst case<br>- memory	time: always O(n log n)<br><br>memory: O(n) aux
String: determine if a string has only unique characters (2)	use a set, <br><br>or <b>sort</b> the string
Alg: P, NP definition	solvable in polynomial time<br>a solution can be verified in polynomial time
SD components: OLTP, OLAP	online transaction/analytical processing<br>RDBMS vs. datawarehouse<br>low vs high latency
DS: good sort for a linked list	good: merge sort<br><br>possible but more difficult?: quick sort
SD: how many seconds in a day	90K
Array: Rotate an array<br>(3 ways)	1. naive, step by step<br><br>2. With a temp array of size K. <br><br>3. With cycles (compute gcd)
Array: Convert array into Zig-Zag fashion: distinct element or not cases	distinct O(n)|O(1) aux bubble sort-like swap <br> not distinct QuickSelect to find median, partition O(n)
String: Is a string with (), {}, [] balanced	<b>stack</b> with active items O(n)
Array: Count triplets with sum smaller than a given value in O(n^2)	sort, loop for first element, use two-pointer-sum <br> O(n^2)|O(1) aux
Array: Print matrix in spiral	four variables top bottom left right. Reduce
SD components: 4 cache strategies	cache aside: app does everything<br><br>write-through: cache interacts with DB<br><br>write-behind/back: app writes to cache and async write to DB<br><br>refresh ahead: auto refresh by cache
SD components: replication modes of MySQL<br>(what is in the WAL)	statement-based ("insert ...") = logical<br><br><br>row-based: result of the statement = physical<br><br>or a mix
Tree: Check if a tree is a BST (2)	1. recursive propagate min/max O(n), <br>2. check if <b>in-order traversal</b> is <b>sorted</b> O(n)
Sort: merge sort	merge sorted subarrays with auxiliary array (allocate once)
Sort: sort when limited range of keys	counting sort O(n + k)/O(n + k)<br><br>bucket sort O(n + k)/O(nk)<br><br>radix sort O(w n)/O(w + n)
LinkedList: is a linked list a palindrome?	reverse second half, check (and restore)
SD: CQRS	command query responsibility separation<br><br>separate read and write of data
LinkedList: insertion in linked list tip	use dummy first node
Sort: sort when element are nearly sorted (2 ways)	insertion sort<br>heapsort
String: Edit Distance algo, complex	DP O(mn)
Bit: test if a number is a power of two	(n & (n-1)) == 0
SD components: default replication of MySQL	async primary/backup
QuickSort: best and worst case of QuickSort<br><br>memory complexity	best: pivot splits array in half each time O(n log n)/O(log n)<br>worst: pivot is min (or max), O(n^2)/O(log n)<br><br>Memory: O(log n) with in-place partitioning
Prob:<br>Merge intervals	sort by start, <br>one pass <br><br>O(nlog n)|O(n)
Tree: k-th highest element of BST	reverse inorder traversal of BST. O(h + k)
LinkedList: Select random node from linked list (2)	method1: naive count nodes in first pass. <br><br>method2: <b>reservoir</b> sampling O(n) one pass.
OO: member overloading	same name but different signature
