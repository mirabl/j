class Solution {
public:
    map<int, vector<int>> G;
    set<int> ini;
    set<int> visited;
    
    int cc(int root, int current) {
        if (current != root && ini.count(current) == 1) {
            return -1;
        }
        
        if (visited.count(current) == 1) {
            return 0;
        }
        visited.insert(current);
        int size = 0;
        for (int next: G[current]) {
            int s = cc(root, next);
            if (s == -1) {
                return -1;
            }
            size += s;
        }
        return 1 + size;
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    G[i].push_back(j);
                    G[j].push_back(i);
                }
            }
        }
        
        sort(initial.begin(), initial.end());
        for (int i: initial) {
            ini.insert(i);
        }
        
        int besti = initial[0];
        int bestM = 1;

        for (int i: initial) {
            visited.clear();
            int M = cc(i, i);
            if (M == -1) {
                continue;
            }
            if (M > bestM) {
                bestM = M;
                besti = i;
            }
        }
        return besti;
    }
};
